generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               String     @id @default(uuid())
    username         String
    email            String
    fullName         String
    password         String
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    profilePic       String
    messageRead      Message[]  @relation(name: "MessageReadBy")
    messageReceived  Message[]  @relation(name: "MessageReceivedBy")
    messageSent      Message[]  @relation(name: "MessageSentBy")
    chatRooms        ChatRoom[] @relation(name: "ChatRoomParticipants")
    messages         Message[]  @relation(name: "MessageRecipients")
    groupsCreated    ChatRoom[] @relation(name: "CreatedBy")
    groupsSuperAdmin ChatRoom[] @relation(name: "SuperAdmin")
    groupsAdmin      ChatRoom[] @relation(name: "GroupAdmins")

    @@unique([username, email])
    @@index([username, email])
}

model Message {
    id         String     @id @default(uuid())
    content    String
    sentAt     DateTime   @default(now())
    editedAt   DateTime   @updatedAt
    readBy     User[]     @relation(name: "MessageReadBy")
    isEdited   Boolean    @default(false)
    senderId   String
    sentBy     User       @relation(name: "MessageSentBy", fields: [senderId], references: [id])
    chatRoomId String?
    chatRoom   ChatRoom?  @relation(name: "ChatRoomMessages", fields: [chatRoomId], references: [id], onDelete: Cascade)
    receivedBy User[]     @relation(name: "MessageReceivedBy")
    recipients User[]     @relation(name: "MessageRecipients")
    ChatRoom   ChatRoom[] @relation(name: "LatestMessage")

    @@index([senderId, chatRoomId, editedAt])
}

model ChatRoom {
    id               String    @id @default(uuid())
    createdAt        DateTime  @default(now())
    messages         Message[] @relation(name: "ChatRoomMessages")
    participants     User[]    @relation(name: "ChatRoomParticipants")
    roomType         RoomType  @default(DIRECT_MESSAGE)
    name             String?
    picture          String?
    createdById      String?
    createdBy        User?     @relation(name: "CreatedBy", fields: [createdById], references: [id])
    pictureUpdatedAt DateTime? @updatedAt
    nameUpdatedAt    DateTime? @updatedAt
    superAdminId     String?
    superAdmin       User?     @relation(name: "SuperAdmin", fields: [superAdminId], references: [id])
    admins           User[]    @relation(name: "GroupAdmins")
    latestMessageId  String?
    latestMessage    Message?  @relation(name: "LatestMessage", fields: [latestMessageId], references: [id], onDelete: Cascade)

    @@index([roomType, superAdminId, latestMessageId])
}

enum RoomType {
    DIRECT_MESSAGE
    GROUP
}
