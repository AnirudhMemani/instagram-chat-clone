// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String          @id @default(uuid())
    username        String          @unique
    email           String          @unique
    fullName        String
    password        String
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    profilePic      String
    chatRooms       ChatRoom[]      @relation(name: "ChatRoomParticipants")
    memberOf        Group[]         @relation(name: "GroupMembers")
    adminOf         Group[]         @relation(name: "GroupAdmin")
    superAdmin      Group[]         @relation(name: "SuperAdmin")
    MessageRead     Message[]       @relation(name: "MessageReadBy")
    MessageReceived Message[]       @relation(name: "MessageReceivedBy")
    MessageSent     Message[]       @relation(name: "MessageSentBy")
    DirectMessage   DirectMessage[]

    @@index([id])
}

model Message {
    id            String         @id @default(uuid())
    content       String
    contentType   ContentType
    sentAt        DateTime       @default(now())
    editedAt      DateTime       @updatedAt
    readBy        User[]         @relation(name: "MessageReadBy")
    senderId      String
    sentBy        User           @relation(name: "MessageSentBy", fields: [senderId], references: [id])
    chatRoomId    String
    chatRoom      ChatRoom       @relation(fields: [chatRoomId], references: [id])
    Attachments   Attachment[]
    ReceivedBy    User[]         @relation(name: "MessageReceivedBy")
    DirectMessage DirectMessage? @relation(name: "LatestMessgae")

    @@index([senderId, chatRoomId])
}

model DirectMessage {
    id              String   @id @default(uuid())
    latestMessageId String   @unique
    latestMessage   Message  @relation(name: "LatestMessgae", fields: [latestMessageId], references: [id])
    sentTo          User[]
    chatRoomId      String   @unique
    chatRoom        ChatRoom @relation(fields: [chatRoomId], references: [id])
}

model ChatRoom {
    id            String         @id @default(uuid())
    name          String
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    messages      Message[]
    participants  User[]         @relation(name: "ChatRoomParticipants")
    Group         Group?
    DirectMessage DirectMessage?
}

model Group {
    id               String   @id @default(uuid())
    name             String
    picture          String
    createdAt        DateTime @default(now())
    pictureUpdatedAt DateTime @updatedAt
    nameUpdatedAt    DateTime @updatedAt
    members          User[]   @relation(name: "GroupMembers")
    superAdminId     String
    superAdmin       User     @relation(name: "SuperAdmin", fields: [superAdminId], references: [id])
    adminOf          User[]   @relation(name: "GroupAdmin")
    chatRoomId       String   @unique
    chatRoom         ChatRoom @relation(fields: [chatRoomId], references: [id])
}

model Attachment {
    id          String    @id @default(uuid())
    url         String
    contentType String
    size        Int
    sentAt      DateTime  @default(now())
    message     Message[]
}

enum ContentType {
    ATTACHMENT
    TEXT
}
